{"cards":{"1":{"question":"Explain the different ways that graphs can be represented.What are the pros and cons of various ways of representing graphs","answer":"adjency list, adjency matrix, edge list","know":"10"},"2":{"question":"What does it mean to be RESTful ?","answer":"representational state transfer. Archetecture/design priniples HTTP was designed on. state change and web resources accessed through a simple stateless protocol. The client doesnt neet to know anything about the server before hand, and the same get request should always generate the same response. GET 'www.here.com/users/2' is a restful api for accesing a database of users, which should be a link given to the client browser through a GET 'www.here.com'.\nTLDR: webpage is a representation of state, with links to desired resources/statechange represented in simple http methods and adresses","know":"10"},"3":{"question":"Explain prototypes in JavaScript.","answer":"every object has a prototype reference. When object.method() is called it, if its not found on object it will be looked for on object.prototype then object.prototype.prototype and so on. Prototype is an object itself, so while it performs a similar purpose to a parent class in classical inheritence, its very different.\njs classes are build from constructors that set up a 'this' (i.e function that(a){this.a=a}), and when called like 'new that()' the new keyword sets the prototype of a new object to that.prototype and sets this objects properties using the constructor","know":"10"},"4":{"question":"List the key benefits that HTML5 introduced.","answer":"1)new semantic tags\n2)new video and audio support\n3)canvas\n4)contenteditable='true'\n5)'required' attribute\n6)autofocus\n7)placeholder\n8)accessibility","know":"10"},"5":{"question":"How do media queries work ?","answer":"you create a new scope in css based on properties like @media (min-width: 600px), which will select any time width is a minimum of 600px. Generally advised to have mobile size be standard CSS and then buetify as screen gets larger","know":"10"},"6":{"question":"What's a closure? How are they used?","answer":"a closure is when a function retains access to the scope it was defined in alongside the scope its invoked. Its used in everything from higher order functions like thunks, where the returned function retains a reference to its parent functions input parameters, to using private-like varaibles above classes","know":"10"},"7":{"question":"Give a high level overview of how CSS grids work.","answer":"some wrapper element has display:grid and some css to define its layout with a pretty powerful api. Each child element can either adhere to standard rules or define its own css row and column","know":"3"},"8":{"question":"What are the steps for DFS on a graph?","answer":"you go to a child, you go to the childs child, etc. If you are looking for a specific value mark nodes as visited as you go and add children-to-visit as you go. If the first path reaches a dead end, go backwards and start over from the last to-visit child thats not already visited.","know":"8"},"9":{"question":"What happens when you type in www.google.com and hit enter?","answer":"your browser attempts to open a socket to www.google.com on port 80. First a DNS lookup is done:\n1) First the browser checks a series of caches, which 'google.com' will probably be in. If the ip adress isnt there you query a DNS resolver with the url, usually your ISP over UDP port 53\n2)DNS resolver starts querying a heirarchy of root servers eventually getting to a .com server which knows a name server which knows the url\n3)After the DNS resolver returns an IP address the browser is able to start opening a connection to the socket hopefully listening on the other end of the ip address and port 80. It starts a TCP/ip handshake\n3a)browser sends a syn (sync) packet,\n3b}upon reciept server sends a ack(acknoledge) and a syn packet\n3c)upon receipt of ack and syn browser sends an ack\n3d)connection is made\n4)once the TCP connection is established the browser will send a HTTP GET request to www.google.com\n5)the server recieves and parses the get request eventually returning a response of some files, atleast one of which is an html file for the browser to display googles homepage and closing its connection\n6)the browser parses the html,the css , and renders a dom. This process involves loading files as needed, so embedding smaller files or non-blocking javascript will improve load time.","know":"7"},"10":{"question":"What's the event loop? How does it work?","answer":"the event loop is a event based model of concurenccy. beside the main call stack is an messageQueue which can be filled with messages with callbacks. when the main call stack is empty ready messages are popped off the queue and their callbacks are added to the call stack. this allows for non-blocking asynchronous operations and makes event based programming simple.","know":"6"},"11":{"question":"Explain the steps of topological sort.\n\t","answer":"\ntopological sort is only possible with no cycles, a directed acyclical graph (dag). This means that the vertexes can be ordered by dependency much like a tree.\nKhans algorithm relies on the fact that a dag must have atleast one node with 0 outgoing connections, as a dag always has atleast one destinct path beginning and path ending. \nIf you remove all nodes with no outgoing connections, in a dag, you are guerenteed to get atleast one more node with no outgiong connections, the next step of the ends of the paths you just removed.\nIf you remove nodes like this until you have no more nodes you have the reverse order of a topological a sort. \t","know":"8"},"12":{"question":"What is TCP? When is it used? How does it work?\t","answer":"TCP is a protocol built over the IP protocol with reliability and connection being the priorities (as opposed to raw speed). As far as were concerned the most important aspects of TCP is a tcp header which allows numbers packets, allowing a tcp socket to to send ackoledgements of each packet and reconstruct the original message. \nTCP works by first doing a ip handshake, which is 1=>syn 2=> ack, syn 1=> ack 2, after which it is a reliable tcp based connection\t","know":"9"},"13":{"question":"What's an IFFE? When would you use it?\n\t","answer":"immedietely invoked function. (function(){})(). You can use it as a wrapper for the whole file to not put variables into global scope, or inside for(var i =0...){(function(j){})(i)} to preserve a value of i.\t","know":"8"},"14":{"question":"What lifecycle methods get called in the update phase? What are the use cases for each of those methods? What method gets called in the unmounting phase?\t","answer":"componentWillMount(): nothing on the dom yet, not called with anything, rarely used, sometimes connect to api if persistent connection needed\n\ndidMount(): component has just been mounted, you can set state in this hook, doing something like api.fetch.then((r)=>setstate(r)) which will cause a rerender:\n\nwillReceiveProps(newprops): recieves new props (not called on intitial render), has access to this.props which is old props. good place to do non DOM update, like if you have a canvas or something\n\nshouldUpdate(nextProps,nextState): if this returns false the component will not rerender. Otherwise any state change or rerender of parent will cause this to rerender\n\nwillUpdate: rarely used. If shouldUpdate is used, this may be used instead of WillReceiveProps to update non dom elements\n\nrender:\n\ndidUpdate: not used a ton. called after render, useful as dom is in final state so if you need to do adjustments after dom building this would be a good place\n\nwillUmount: if you need to unbind eventhandlers or destroy a process or something\t","know":"7"},"15":{"question":"What is UDP? When would you use it?\t","answer":"udp is a connectionless version of TCP that doesnt add as much to the underlying ip protocol. It seperates process' by port like tcp, allowing multiplexing, and provides a checksum for itegrity and thats about it. No gaurentee of order or recieval, which is good for times you want to handle that yourself or it is not needed (one example is single packet transmissions like DNS lookups)\t","know":"6"},"16":{"question":"What is this in JS? What are some common pitfalls with this?\t","answer":"this is a reference to context. inside of a function this is the function. The value of this can be changed with bind or apply, or by being called as a function(api.function() vs function(), the latter will lose its reference to this). arrow functions are automatically bound to the this of where they were defined\t","know":"9"}}}